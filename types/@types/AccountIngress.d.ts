// File copied from https://github.com/ConsenSys/permissioning-smart-contracts, so we can use AccountIngress type
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface AccountIngressInterface extends Interface {
  functions: {
    ADMIN_CONTRACT: TypedFunctionDescription<{ encode([]: []): string }>;

    RULES_CONTRACT: TypedFunctionDescription<{ encode([]: []): string }>;

    getAllContractKeys: TypedFunctionDescription<{ encode([]: []): string }>;

    getContractAddress: TypedFunctionDescription<{
      encode([name]: [Arrayish]): string;
    }>;

    getSize: TypedFunctionDescription<{ encode([]: []): string }>;

    isAuthorized: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    removeContract: TypedFunctionDescription<{
      encode([_name]: [Arrayish]): string;
    }>;

    setContractAddress: TypedFunctionDescription<{
      encode([name, addr]: [Arrayish, string]): string;
    }>;

    getContractVersion: TypedFunctionDescription<{ encode([]: []): string }>;

    transactionAllowed: TypedFunctionDescription<{
      encode([sender, target, value, gasPrice, gasLimit, payload]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;
  };

  events: {
    RegistryUpdated: TypedEventDescription<{
      encodeTopics([contractAddress, contractName]: [null, null]): string[];
    }>;
  };
}

export class AccountIngress extends Contract {
  connect(signerOrProvider: Signer | Provider | string): AccountIngress;
  attach(addressOrName: string): AccountIngress;
  deployed(): Promise<AccountIngress>;

  on(event: EventFilter | string, listener: Listener): AccountIngress;
  once(event: EventFilter | string, listener: Listener): AccountIngress;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AccountIngress;
  removeAllListeners(eventName: EventFilter | string): AccountIngress;
  removeListener(eventName: any, listener: Listener): AccountIngress;

  interface: AccountIngressInterface;

  functions: {
    ADMIN_CONTRACT(overrides?: UnsignedTransaction): Promise<string>;

    "ADMIN_CONTRACT()"(overrides?: UnsignedTransaction): Promise<string>;

    RULES_CONTRACT(overrides?: UnsignedTransaction): Promise<string>;

    "RULES_CONTRACT()"(overrides?: UnsignedTransaction): Promise<string>;

    getAllContractKeys(overrides?: UnsignedTransaction): Promise<string[]>;

    "getAllContractKeys()"(overrides?: UnsignedTransaction): Promise<string[]>;

    getContractAddress(
      name: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getContractAddress(bytes32)"(
      name: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getSize(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getSize()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    isAuthorized(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "isAuthorized(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    removeContract(
      _name: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "removeContract(bytes32)"(
      _name: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setContractAddress(
      name: Arrayish,
      addr: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setContractAddress(bytes32,address)"(
      name: Arrayish,
      addr: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getContractVersion(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getContractVersion()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transactionAllowed(
      sender: string,
      target: string,
      value: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      payload: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "transactionAllowed(address,address,uint256,uint256,uint256,bytes)"(
      sender: string,
      target: string,
      value: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      payload: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;
  };

  ADMIN_CONTRACT(overrides?: UnsignedTransaction): Promise<string>;

  "ADMIN_CONTRACT()"(overrides?: UnsignedTransaction): Promise<string>;

  RULES_CONTRACT(overrides?: UnsignedTransaction): Promise<string>;

  "RULES_CONTRACT()"(overrides?: UnsignedTransaction): Promise<string>;

  getAllContractKeys(overrides?: UnsignedTransaction): Promise<string[]>;

  "getAllContractKeys()"(overrides?: UnsignedTransaction): Promise<string[]>;

  getContractAddress(
    name: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getContractAddress(bytes32)"(
    name: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getSize(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getSize()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  isAuthorized(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "isAuthorized(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  removeContract(
    _name: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "removeContract(bytes32)"(
    _name: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setContractAddress(
    name: Arrayish,
    addr: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setContractAddress(bytes32,address)"(
    name: Arrayish,
    addr: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getContractVersion(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getContractVersion()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  transactionAllowed(
    sender: string,
    target: string,
    value: BigNumberish,
    gasPrice: BigNumberish,
    gasLimit: BigNumberish,
    payload: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "transactionAllowed(address,address,uint256,uint256,uint256,bytes)"(
    sender: string,
    target: string,
    value: BigNumberish,
    gasPrice: BigNumberish,
    gasLimit: BigNumberish,
    payload: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  filters: {
    RegistryUpdated(contractAddress: null, contractName: null): EventFilter;
  };

  estimate: {
    ADMIN_CONTRACT(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "ADMIN_CONTRACT()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    RULES_CONTRACT(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "RULES_CONTRACT()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getAllContractKeys(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getAllContractKeys()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getContractAddress(
      name: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getContractAddress(bytes32)"(
      name: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getSize(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getSize()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    isAuthorized(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "isAuthorized(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    removeContract(
      _name: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "removeContract(bytes32)"(
      _name: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setContractAddress(
      name: Arrayish,
      addr: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setContractAddress(bytes32,address)"(
      name: Arrayish,
      addr: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getContractVersion(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getContractVersion()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transactionAllowed(
      sender: string,
      target: string,
      value: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      payload: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transactionAllowed(address,address,uint256,uint256,uint256,bytes)"(
      sender: string,
      target: string,
      value: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      payload: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
